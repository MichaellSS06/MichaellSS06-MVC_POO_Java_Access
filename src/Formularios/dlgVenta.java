
package Formularios;

import Clases.*;
import DAO.*;
import java.util.List;
import javax.swing.table.DefaultTableModel;

import javax.swing.RowFilter;
import java.util.regex.PatternSyntaxException;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class dlgVenta extends javax.swing.JDialog {
    
    // Variables
    DAOVenta venta_dao = new DAOVenta();
    DAOCliente cliente_dao = new DAOCliente();
    DAOVentaDetalle ventaDetalle_dao = new DAOVentaDetalle();
    DefaultTableModel tbmProductos;
    DefaultTableModel tbmVentas;
    String indexVenta;
    
    private TableRowSorter<TableModel> sorter;
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(dlgVenta.class.getName());

    /**
     * Creates new form dlgVenta
     */
    public dlgVenta(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        tbmProductos = (DefaultTableModel) tabServicio.getModel();
        tbmVentas = (DefaultTableModel) tabVenta.getModel();
        
        // Inicializar el sorter con el modelo de la tabla de detalles
        sorter = new TableRowSorter<>(tbmVentas);
        tabVenta.setRowSorter(sorter);

        cargarVentas();
        cargarVentasDetalle();
    }
    
    public void cargarVentas(){
        // Limpiar el modelo antes de cargar nuevos datos
        tbmProductos.setRowCount(0);
        List<CVenta> listaVentas = venta_dao.listaVentas();
        tbmProductos = (DefaultTableModel)tabServicio.getModel();
        Object[] ob = new Object[4];
        for (int i = 0; i < listaVentas.size(); i++) {
            ob[0] = listaVentas.get(i).getId();
            ob[1] = listaVentas.get(i).getFecha();
            ob[2] = listaVentas.get(i).getCliente().getNombres();
            ob[3] = listaVentas.get(i).getTotal();
            tbmProductos.addRow(ob);
        }        
        tabServicio.setModel(tbmProductos);
    }
    
    public void cargarVentasDetalle(){
        // Limpiar el modelo antes de cargar nuevos datos
        tbmVentas.setRowCount(0);
        List<CVentaDetalle> listaVentasDetalle = ventaDetalle_dao.listaVentasDetalle();
        tbmVentas = (DefaultTableModel)tabVenta.getModel();
        Object[] ob = new Object[6];
        for (int i = 0; i < listaVentasDetalle.size(); i++) {
            ob[0] = listaVentasDetalle.get(i).getId();
            ob[1] = listaVentasDetalle.get(i).getVenta().getId();
            ob[2] = listaVentasDetalle.get(i).getServicio().getNombre();
            ob[3] = listaVentasDetalle.get(i).getCantidad();
            ob[4] = listaVentasDetalle.get(i).getPrecio_unit();
            ob[5] = listaVentasDetalle.get(i).getSubtotal();
            tbmVentas.addRow(ob);
        }        
        tabVenta.setModel(tbmVentas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabServicio = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabVenta = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tabServicio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "FECHA", "CLIENTE", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabServicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabServicioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabServicio);

        tabVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "VENTA", "SERVICIO", "CANTIDAD", "PRECIO UNITARIO", "SUBTOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabVenta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(176, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(137, 137, 137)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void tabServicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabServicioMouseClicked
        // TODO add your handling code here:
        Integer k = tabServicio.getSelectedRow();

        if (k >= 0) { // Asegurarse de que una fila ha sido seleccionada
            // El valor debe obtenerse de la vista de la tabla
            indexVenta = tabServicio.getValueAt(k, 0).toString();
            aplicarFiltroATablaDetalle();
        }
    }//GEN-LAST:event_tabServicioMouseClicked
    
    private void aplicarFiltroATablaDetalle() {
        if (indexVenta == null || indexVenta.isEmpty()) {
            sorter.setRowFilter(null); // Borrar filtro si indexVenta es nulo o vacío
        } else {
            try {
                // Crear un RowFilter para comparar la segunda columna (índice 1, que es "VENTA")
                // con el valor de indexVenta.
                RowFilter<TableModel, Object> rf = RowFilter.regexFilter(indexVenta, 1);
                sorter.setRowFilter(rf);
            } catch (PatternSyntaxException e) {
                System.out.println("Error de sintaxis de expresión regular: " + e.getMessage());
                // En caso de error, no aplicar ningún filtro
                sorter.setRowFilter(null);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                dlgVenta dialog = new dlgVenta(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabServicio;
    private javax.swing.JTable tabVenta;
    // End of variables declaration//GEN-END:variables
}
